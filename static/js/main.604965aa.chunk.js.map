{"version":3,"sources":["components/btn/index.js","components/size/index.js","utils.js","components/game/index.js","App.js","reportWebVitals.js","index.js"],"names":["Btn","onClick","children","className","Size","onChange","label","value","e","operations","generateEmptyGrid","rows","cols","aux","i","push","Array","from","getSavedValue","defaultValue","key","storaged","window","localStorage","getItem","JSON","parse","saveValue","setItem","stringify","Game","useState","running","setRunning","parseInt","setCols","setRows","oldGrid","grid","setGrid","runningRef","useRef","current","runSimulation","useCallback","g","produce","draft","k","neighbors","forEach","x","y","newI","newK","setTimeout","handleSize","type","target","isNaN","useEffect","Math","random","style","display","gridTemplateColumns","map","col","newGrid","width","height","backgroundColor","undefined","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.604965aa.chunk.js","sourcesContent":["import './styles.css';\n\nfunction Btn({ onClick, children }) {\n  return (\n    <button className=\"btn\" onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n\nexport default Btn;\n","import \"./styles.css\";\n\nfunction Size({ onChange, label, value }) {\n  return (\n    <div className=\"container-size-input\">\n      <label>{label}</label>\n      <input value={value} onChange={(e) => onChange(e, label)} />\n    </div>\n  );\n}\n\nexport default Size;\n","\nexport const operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nexport const generateEmptyGrid = (rows, cols) => {\n  const aux = [];\n  for (let i = 0; i < rows; i++) {\n    aux.push(Array.from(Array(cols), () => 0));\n  }\n  return aux;\n};\n\nexport const getSavedValue = (defaultValue, key) => {\n  const storaged = window.localStorage.getItem(key);\n  return storaged !== null\n    ? JSON.parse(storaged)\n    : defaultValue;\n}\n\nexport const saveValue = (value, key) => {\n  window.localStorage.setItem(key, JSON.stringify(value))\n}\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport Button from \"../btn\";\nimport Size from \"../size\";\nimport produce from \"immer\";\nimport {\n  operations,\n  generateEmptyGrid,\n  getSavedValue,\n  saveValue,\n} from \"../../utils\";\n\nconst Game = () => {\n  const [running, setRunning] = useState(false);\n  const [cols, setCols] = useState(parseInt(getSavedValue(30, \"cols\")));\n  const [rows, setRows] = useState(parseInt(getSavedValue(30, \"rows\")));\n  const oldGrid = getSavedValue(null, \"grid\");\n\n  const [grid, setGrid] = useState(() => {\n    return oldGrid || generateEmptyGrid(rows, cols);\n  });\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n\n    setGrid((g) => {\n      const newGrid = produce(g, (draft) => {\n        for (let i = 0; i < rows; i++) {\n          for (let k = 0; k < cols; k++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newK = k + y;\n              if (newI >= 0 && newI < rows && newK >= 0 && newK < cols) {\n                neighbors += g[newI][newK];\n              }\n            });\n\n            if (neighbors < 2 || neighbors > 3) {\n              draft[i][k] = 0;\n            } else if (g[i][k] === 0 && neighbors === 3) {\n              draft[i][k] = 1;\n            }\n          }\n        }\n      });\n      return newGrid;\n    });\n\n    setTimeout(runSimulation, 100);\n  }, [cols, rows]);\n\n  const handleRun = () => {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  };\n\n  const handleRandom = () => {\n    const aux = [];\n    for (let i = 0; i < rows; i++) {\n      aux.push(Array.from(Array(cols), () => (Math.random() > 0.7 ? 1 : 0)));\n    }\n    setGrid(aux);\n  };\n\n  const handleClean = () => {\n    setGrid(generateEmptyGrid(rows, cols));\n  };\n\n  const checkSize = (value) => {\n    if (parseInt(value) === 0 || isNaN(parseInt(value))) return 1;\n    else if (parseInt(value) > 200) return 200;\n    return parseInt(value);\n  };\n\n  const handleSize = (e, type) => {\n    let aux = checkSize(e.target.value);\n    let grid = []\n    if (type === \"cols\") {\n      grid = generateEmptyGrid(rows, aux)\n      setCols(aux);\n    } else {\n      grid = generateEmptyGrid(aux, cols)\n      setRows(aux);\n    }\n    saveValue(aux, type);\n    setRunning(false);\n    setGrid(grid);\n  };\n\n  useEffect(() => {\n    saveValue(grid, 'grid')\n  }, [grid])\n\n  return (\n    <>\n      <div className=\"container-btns\">\n        <div className=\"container-btns\">\n          <Size label=\"rows\" onChange={handleSize} value={rows} />\n          <Size label=\"cols\" onChange={handleSize} value={cols} />\n        </div>\n        <div className=\"container-btns\">\n          <Button onClick={handleRun}>{running ? \"stop\" : \"start\"}</Button>\n          <Button onClick={handleRandom}>random</Button>\n          <Button onClick={handleClean}>clear</Button>\n        </div>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${cols}, 10px)`,\n        }}\n      >\n        {grid.map((rows, i) =>\n          rows.map((col, k) => (\n            <div\n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, (draft) => {\n                  draft[i][k] = grid[i][k] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 10,\n                height: 10,\n                backgroundColor: grid[i][k] ? \"white\" : undefined,\n                border: \"solid 1px white\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import Game from './components/game'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}